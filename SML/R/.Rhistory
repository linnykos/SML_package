dat_y = iris[1:100,5]
res = sml_svm(dat_x,dat_y)
res
summary(res)
plot(res)
dat_x = iris[,1:4]
dat_x = cbind(dat_x,"a")
dat_y = iris[,5]
res = sml_da(dat_x,dat_y)
res #NO PRINT IMPLMENTED
summary(res) #NO SUMMARY IMPLEMENTED
plot(res)
source('C:/Users/UikosPC/Dropbox/Han Liu - private/package - sml/SML/R/da.R')
dat_x = iris[,1:4]
dat_x = cbind(dat_x,"a")
dat_y = iris[,5]
res = sml_da(dat_x,dat_y)
res #NO PRINT IMPLMENTED
summary(res) #NO SUMMARY IMPLEMENTED
plot(res)
source('C:/Users/UikosPC/Dropbox/Han Liu - private/package - sml/SML/R/da.R')
plot(res)
source('C:/Users/UikosPC/Dropbox/Han Liu - private/package - sml/SML/R/da.R')
plot(res)
source('C:/Users/UikosPC/Dropbox/Han Liu - private/package - sml/SML/R/da.R')
source('C:/Users/UikosPC/Dropbox/Han Liu - private/package - sml/SML/R/da.R')
plot(res)
source('C:/Users/UikosPC/Dropbox/Han Liu - private/package - sml/SML/R/da.R')
plot(res)
source('C:/Users/UikosPC/Dropbox/Han Liu - private/package - sml/SML/R/da.R')
plot(res)
source('C:/Users/UikosPC/Dropbox/Han Liu - private/package - sml/SML/R/da.R')
source('C:/Users/UikosPC/Dropbox/Han Liu - private/package - sml/SML/R/da.R')
source('C:/Users/UikosPC/Dropbox/Han Liu - private/package - sml/SML/R/da.R')
plot(res)
install.packages("scimapClient",repos="http://scisoft-net-map.isri.cmu.edu/static/R")
library(scimapClient)
6561/729
9^3
692/729
source("http://bioconductor.org/biocLite.R")
biocLite("STRINGdb")
?write.csv
?setdiff
(x <- c(sort(sample(1:20, 9)), NA))
(y <- c(sort(sample(3:23, 7)), NA))
union(x, y)
intersect(x, y)
setdiff(x, y)
x
y
install.packages("igraph")
library(igraph)
el <- matrix(nc=3, byrow=TRUE,
c(1,2,0, 1,3,2, 1,4,1, 2,3,0, 2,5,5, 2,6,2, 3,2,1, 3,4,1,
3,7,1, 4,3,0, 4,7,2, 5,6,2, 5,8,8, 6,3,2, 6,7,1, 6,9,1,
6,10,3, 8,6,1, 8,9,1, 9,10,4) )
g2 <- add.edges(graph.empty(10), t(el[,1:2]), weight=el[,3])
shortest.paths(g2, mode="out")
plot(g2)
shortest.paths(g2, mode="out",directed=FALSE)
get.shortest.paths(g2,from=1,mode="all")
library(glmnet)
generate_mixture_model<-function(n,d,k,mean,variance){
if(!check_isNumber(n) || sum(n%%1!=0)!=0 || sum(n<1)!=0) stop("'n' must be a positive integer.")
check_isPosInteger(list(d,k),c("d","k"))
if(length(n)!=1 && length(n)!=k) stop("'n' must have length 1 or length 'k'.")
if(!missing(mean)){
if(!check_isNumber(mean)) stop("'mean' must be a matrix of numbers.")
if(sum(dim(mean)!=c(k,d))>0) stop("'mean' must have dimension of size k-d.")
}
if(!missing(variance)){
if(!check_isNumber(variance)) stop("'variance' must be a matrix of numbers.")
if(sum(dim(variance)!=c(d,d,k))>0) stop("'variance' must be a 3D matrix of size d-d-k.")
}
source('C:/Users/UikosPC/Dropbox/Ryan Tibshirani - private/clustered fused lasso/clusteredfusedlasso/R/cfl.R')
source('C:/Users/UikosPC/Dropbox/Ryan Tibshirani - private/clustered fused lasso/clusteredfusedlasso/R/cfl.R')
source('C:/Users/UikosPC/Dropbox/Ryan Tibshirani - private/clustered fused lasso/clusteredfusedlasso/R/additional.R')
set.seed(10)
n = 500
sigma = 1
dist = 1
jump.mean =     c(0, 2,  1, 0, 1, 0,  2, 3, 0, 3,  0)*dist
jump.location = c(0,.12,.2,.3,.4,.5,.55,.6,.8,.9,.92)
y = generate.problem(n, jump.location, jump.mean, sigma)
plot(y)
lam = 3.49
K=4
res = cfl.1D(y,K,lam,multiplier=1)
res$info
plotspecial(res, lambda=lam, jump.location=jump.location, jump.mean=jump.mean)
eval.coef(res, jump.location, jump.mean, sigma)
library(clusteredfusedlasso)
source('C:/Users/UikosPC/Dropbox/Ryan Tibshirani - private/clustered fused lasso/clusteredfusedlasso/R/cfl.R')
set.seed(10)
n = 500
sigma = 1
dist = 1
jump.mean =     c(0, 2,  1, 0, 1, 0,  2, 3, 0, 3,  0)*dist
jump.location = c(0,.12,.2,.3,.4,.5,.55,.6,.8,.9,.92)
y = generate.problem(n, jump.location, jump.mean, sigma)
plot(y)
lam = 3.49
K=4
res = cfl.1D(y,K,lam,multiplier=1)
res$info
plotspecial(res, lambda=lam, jump.location=jump.location, jump.mean=jump.mean)
eval.coef(res, jump.location, jump.mean, sigma)
library(quadprog)
if(fabs(b[i]-b[0])>tol) {
tmpindic = 1;
} else {
tmpindic = 0;
}
set.seed(10)
n = 500
sigma = 1
dist = 1
jump.mean =     c(0, 2,  1, 0, 1, 0,  2, 3, 0, 3,  0)*dist
jump.location = c(0,.12,.2,.3,.4,.5,.55,.6,.8,.9,.92)
y = generate.problem(n, jump.location, jump.mean, sigma)
plot(y)
lam = 3.49
K=4
res = cfl.1D(y,K,lam,multiplier=1)
res$info
plotspecial(res, lambda=lam, jump.location=jump.location, jump.mean=jump.mean)
eval.coef(res, jump.location, jump.mean, sigma)
library(glmnet)
library(mclust)
setwd("C:/Users/UikosPC/Dropbox/Han Liu - private/package - sml/SML/R")
source("standard.R")
source("error_handling.R")
source("helper_func.R")
source("svm.R")
library(svmpath)
data(iris)
dat_x = iris[1:100,1:4]
dat_y = iris[1:100,5]
res = sml_svm(dat_x,dat_y)
res
summary(res)
data(iris)
dat_x = iris[51:150,1:4]
dat_y = iris[51:150,5]
res = sml_svm(dat_x,dat_y)
res
summary(res)
dat_x
dat_Y
dat_y
data(iris)
dat_x = iris[51:150,1:4]
dat_y = as.character(iris[51:150,5])
res = sml_svm(dat_x,dat_y)
dat_y
dat_y = as.factor(iris[51:150,5])
dat_y
levels(dat_y)
dat_x = iris[51:150,1:4]
dat_y = as.factor(as.character(iris[51:150,5]))
dat_y
res = sml_svm(dat_x,dat_y)
dat_y
dat_x
dat_x = as.matrix(iris[51:150,1:4])
dat_y = as.factor(as.character(iris[51:150,5]))
res = sml_svm(dat_x,dat_y)
data(iris)
dat_x = data.frame(as.matrix(iris[51:150,1:4]))
dat_y = as.factor(as.character(iris[51:150,5]))
res = sml_svm(dat_x,dat_y)
library(glmnet)
library(mclust)
setwd("C:/Users/UikosPC/Dropbox/Han Liu - private/package - sml/SML/R")
source("standard.R")
source("error_handling.R")
source("helper_func.R")
source("svm.R")
library(svmpath)
data(iris)
dat_x = data.frame(as.matrix(iris[51:150,1:4]))
dat_y = as.factor(as.character(iris[51:150,5]))
res = sml_svm(dat_x,dat_y)
res
summary(res)
library(glmnet)
library(mclust)
setwd("C:/Users/UikosPC/Dropbox/Han Liu - private/package - sml/SML/R")
source("standard.R")
source("error_handling.R")
source("helper_func.R")
source("da.R")
data(iris)
dat_x = iris[,1:4]
dat_x = cbind(dat_x,"a")
dat_y = iris[,5]
res = sml_da(dat_x,dat_y)
res
summary(res)
res$sigma
res = sml_da(dat_x,dat_y,type="quadratic",diagonalize=TRUE)
res
res$sigma
tmp = res$sigma
colnames(tmp)=c("a","b","c","d")
tmp
dimnames(tmp)
res$mean
names(res)
res$train.pred
dat_Y
dat_y
res$y.train
library(glmnet)
library(mclust)
setwd("C:/Users/UikosPC/Dropbox/Han Liu - private/package - sml/SML/R")
source("standard.R")
source("error_handling.R")
source("helper_func.R")
source("da.R")
res = sml_da(dat_x,dat_y)
source("da.R")
res = sml_da(dat_x,dat_y)
source("da.R")
res = sml_da(dat_x,dat_y)
data(iris)
dat_x = data.frame(as.matrix(iris[51:150,1:4]))
dat_y = as.factor(as.character(iris[51:150,5]))
res = sml_svm(dat_x,dat_y)
res
res$y.train
source("helper_func.R")
source("da.R")
data(iris)
dat_x = iris[,1:4]
dat_x = cbind(dat_x,"a")
dat_y = iris[,5]
res = sml_da(dat_x,dat_y)
source("standard.R")
data(iris)
dat_x = iris[,1:4]
dat_x = cbind(dat_x,"a")
dat_y = iris[,5]
res = sml_da(dat_x,dat_y)
res
res$y.train
res$mean
res$covariance
data(iris)
dat_x = iris[,1:4]
dat_x = cbind(dat_x,"a")
dat_y = iris[,5]
res = sml_da(dat_x,dat_y)
res$y.train
source("da.R")
data(iris)
dat_x = iris[,1:4]
dat_x = cbind(dat_x,"a")
dat_y = iris[,5]
res = sml_da(dat_x,dat_y)
res$y.train
data(iris)
dat_x = data.frame(as.matrix(iris[51:150,1:4]))
dat_y = as.factor(as.character(iris[51:150,5]))
res = sml_svm(dat_x,dat_y)
source("svm.R")
data(iris)
dat_x = data.frame(as.matrix(iris[51:150,1:4]))
dat_y = as.factor(as.character(iris[51:150,5]))
res = sml_svm(dat_x,dat_y)
res$y.train
data(iris)
dat_x = iris[,1:4]
dat_x = cbind(dat_x,"a")
dat_y = iris[,5]
res = sml_da(dat_x,dat_y)
res
res$mean
res$proportion
res$covariance
source("da.R")
dat_x = iris[,1:4]
dat_x = cbind(dat_x,"a")
dat_y = iris[,5]
res = sml_da(dat_x,dat_y)
res
source("da.R")
res
res$test.id
res$info
res$proportion
summary(res)
res
res$train.error
source("da.R")
data(iris)
dat_x = iris[,1:4]
dat_x = cbind(dat_x,"a")
dat_y = iris[,5]
res = sml_da(dat_x,dat_y)
res
summary(res)
res
res$y.train
res
res$train.pred
library(glmnet)
library(mclust)
setwd("C:/Users/UikosPC/Dropbox/Han Liu - private/package - sml/SML/R")
source("standard.R")
source("error_handling.R")
source("helper_func.R")
source("logistic.R")
data(iris)
dat_x = iris[,1:4]
dat_y = iris[,5]
res = sml_regression_logistic(dat_x,dat_y)
res
summary(res)
data(iris)
dat_x = iris[,1:4]
dat_x = cbind(dat_x,"a")
dat_y = iris[,5]
res = sml_da(dat_x,dat_y)
res
da$train.scores
res$train.scores
res
res$train.pred
summary(res)
library(glmnet)
library(mclust)
setwd("C:/Users/UikosPC/Dropbox/Han Liu - private/package - sml/SML/R")
source("standard.R")
source("error_handling.R")
source("helper_func.R")
source("em_gaussian.R")
x = faithful
res = sml_em_gaussian(x)
x = faithful
res = sml_em_gaussian(x)
source("em_gaussian.R")
x = faithful
res = sml_em_gaussian(x)
source("standard.R")
source("error_handling.R")
source("helper_func.R")
source("em_gaussian.R")
x = faithful
res = sml_em_gaussian(x)
res
summary(res)
res$z
res$classification
source("em_gaussian.R")
x = faithful
res = sml_em_gaussian(x)
res
summary(res)
res
res$mean
source("em_gaussian.R")
res = sml_em_gaussian(x)
res
summary(res)
faithful
res$mean
source("em_gaussian.R")
x = faithful
res = sml_em_gaussian(x)
res$mean
source("em_gaussian.R")
x = faithful
res = sml_em_gaussian(x)
source("em_gaussian.R")
x = faithful
res = sml_em_gaussian(x)
names(res)
res$mean
source("em_gaussian.R")
x = faithful
res = sml_em_gaussian(x)
source("em_gaussian.R")
x = faithful
res = sml_em_gaussian(x)
res$mean
x = faithful
res = sml_kmeans(x)
setwd("C:/Users/UikosPC/Dropbox/Han Liu - private/package - sml/SML/R")
source("standard.R")
source("error_handling.R")
source("helper_func.R")
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
res
summary(res)
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
summary(res)
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
summary(res)
x = faithful
res = sml_kmeans(x)
summary(res)
res
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
res = sml_kmeans(x)
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
res = sml_kmeans(x)
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
res
summary(res)
res$x
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
summary(res)
res$x[1]
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
summary(res$x)
summary(res)
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
summary(res)
res
summary(res)
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
summary(res)
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
summary(res)
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
summary(res)
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
summary(res)
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
summary(res)
res$mean
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
tmp = summary(res)
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
tmp = summary(res)
tmp
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
tmp = summary(res)
names(tmp)
tmp$uncertainty
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
summary(res)
source("kmeans.R")
x = faithful
res = sml_kmeans(x)
res
res$modelselect
summary(res)
library(glmnet)
library(mclust)
setwd("C:/Users/UikosPC/Dropbox/Han Liu - private/package - sml/SML/R")
source("standard.R")
source("error_handling.R")
source("helper_func.R")
source("sml_pca.R")
data(USArrests)
res = sml_pca(USArrests)
res
summary(res)
res$num.pc
res
res$vec.info
plot(Res)
plot(res)
source("sml_pca.R")
data(USArrests)
res = sml_pca(USArrests)
plot(res)
